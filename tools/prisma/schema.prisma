generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  email
  github
  google
}

enum Visibility {
  public
  private
}

enum PlanPeriod {
  yearly
  monthly
  quarterly
}

enum Status {
  active
  suspended
  deleted
}

model Tenant {
  id            String         @id @default(cuid())
  name          String
  status        Status         @default(active)
  adminId       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  users         User[]
}

model User {
  id               String   @id @default(cuid())
  name             String
  tenantId         String? // The tenant id
  tenant           Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  picture          String?
  username         String   @unique
  email            String   @unique
  locale           String   @default("en-US")
  emailVerified    Boolean  @default(false)
  twoFactorEnabled Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  provider         Provider
  secrets          Secrets?
  resumes          Resume[]
}

model Secrets {
  id                   String   @id @default(cuid())
  password             String?
  lastSignedIn         DateTime @default(now())
  verificationToken    String?
  twoFactorSecret      String?
  twoFactorBackupCodes String[] @default([])
  refreshToken         String?
  resetToken           String?  @unique
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, id])
}

model Resume {
  id         String      @id @default(cuid())
  title      String
  slug       String
  data       Json        @default("{}")
  visibility Visibility  @default(private)
  locked     Boolean     @default(false)
  statistics Statistics?
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([userId, id])
  @@unique([userId, slug])
  @@index(fields: [userId])
}

model Statistics {
  id        String   @id @default(cuid())
  views     Int      @default(0)
  downloads Int      @default(0)
  resumeId  String   @unique
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([resumeId, id])
}

model Plan {
  id            String     @id @default(cuid()) // Plan id
  status        Status     @default(active) // Plan status
  name          String // The name of the plan
  description   String // Plan description
  language      String // Display language
  groupId       String // Plan group id, e.g. standard, business, etc
  externalId    String // The external plan id in the payment provider
  period        PlanPeriod // Plan period
  price         Float // Plan price
  originalPrice Float // Plan original price
  highlighted   Boolean // Whether the plan is highlighted
  display       Json       @default("{}") // Display options, include button style and features descriptions
  features      Json       @default("{}") // The default features kv map, e.g. {"numberOfAccounts": 10}
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Subscription {
  id         String   @id @default(cuid())
  status     Status   @default(active)
  tenantId   String // The tenant id
  tenant     Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  planId     String // The associated plan
  externalId String // The external id in the payment provider
  uniqueId   String   @unique // The unique id
  features   Json     @default("{}") // The default features kv map, e.g. {"numberOfAccounts": 10}
  start      DateTime // The start time
  end        DateTime // The end time
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model LLMStatistics {
  id           String   @id @default(cuid())
  tenantId     String // The tenant id
  period       String // The statistics period, in the form of 'YYYY-MM'
  requests     BigInt   @default(0) // The number of requests
  inputTokens  BigInt   @default(0) // The number of input tokens
  outputTokens BigInt   @default(0) // The number of output tokens
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([tenantId, period])
}
